---
title: "Survival Skills: Concepts of Data-Driven Visualization"
author: "Curry, Tweedy, Schilling"
format: 
  revealjs:
    logo: logo.png
    # footer: "STEM Services"
    slide-number: true
    #show-notes: separate-page #https://revealjs.com/pdf-export/
    preview-links: true
    slide-tone: true
    controls: true
    smaller: true
    center-title-slide: false
    hash: true
editor: source
---


# Getting started (5 min)

## What we will discuss today

- Define visualizations for data

- What, why, and how of data-driven visualizations

  - What: goals

  - Why: human perception

  - How: design and defaults

- How to get more help

## Ice breakers

-   5 min ice breaker activity: A boring fact about yourself
-   Pronouns if comfortable

::: notes
5 min, use this time to let late arrivals settle in.

  - In person
    - Confirm everyone has at least one person to discuss with (in person) 
    - Provide paper copies of handouts (in person)
    - Ice Breaker at table

  - Online
    - Provide link to handouts (online)
    - Ask each person to introduce themselves in chat (online) with your preferred professional icebreaker
    
:::

## What is data-driven visualization?

-   Definition: "visual representation and presentation of data to facilitate understanding"
-   We use visualizations (graphs, figures, plots) for
    -   exploring 
    -   telling a story 

::: aside
Kirk, 2019, *Data visualization, a handbook for data driven design, 2nd ed*. Los Angeles: SAGE.
:::

::: notes
Exploring is often earlier in analysis or for descriptive studies.
Telling a story is often to supplement or explain a statistical analysis or describe your data.
:::

## Consider this visualization (5 min)

::: {.absolute top="10%" left="-10%" width="90%"}

![](images/complex_figure_to_critique.png)

:::

::: {.absolute top="15%" left="70%" width="50%"}

-   What variables are included?

-   What is a question this graph could answer?

-   What is confusing?

:::

::: aside

"Noise source and individual physiology mediate effectiveness of bird songs adjusted to anthropogenic noise", 2018.
*Scientific Reports* 8:3942.

:::



## Again, here's what we'll cover about visualizations

- What, why, and how of data-driven visualizations

  - What: goals

  - Why: human perception

  - How: design and defaults

- Lots of new and classic visualization resources!

::: {.absolute top="60%" left="0%" width="30%"}

![Handout (easy print PDF)](qrcode_osf-handout-pdf.png)

:::

::: {.absolute top="60%" left="60%" width="30%"}

![Handout (clickable HTML)](qrcode_osf-handout-html.png)

:::


# Goals: **What** you need the graph to be

## Trustworthy, reasonable, faithful, integrity^[Kirk, 2019]

-   Ensure all variables from question are included, aka data density^[Tufte 2001, *The Visual Display of Quantitative Information, 2nd Ed.*, Graphics Press.]
-   Are the relevant summaries and uncertainty shown?^[Wickham, Navarro, Pederson. 2024. Ggplot2: Elegant Graphics for Data Analysis (3e). https://ggplot2-book.org/]

::: {.absolute top="45%" left="4%" width="45%"}
```{r}
library(dplyr)
library(ggplot2)
subset_penguins <- palmerpenguins::penguins %>%
  dplyr::filter(species != "Gentoo", year != 2007)

ggplot(data = subset_penguins, 
       mapping = aes(x = body_mass_g, y = flipper_length_mm)) +
  geom_point() + 
  labs(x = "Penguin weight (g)", 
       y = "Flipper length (mm)") +
  theme_classic()

```
:::


::: {.absolute top="45%" left="54%" width="45%"}
```{r}
ggplot(data = subset_penguins, 
       mapping = aes(x = body_mass_g, y = flipper_length_mm,
                     color = species, shape = species)) +
  geom_point(size = 5) + 
  geom_smooth(method = 'lm')+
  labs(x = "Penguin weight (g)", 
       y = "Flipper length (mm)") +
  theme_classic()

```
:::




## Where appropriate, follow examples

- What's the common way to present this in your discipline?
  - Searching in captions in some databases.
- Check your journal style guide if submitting manuscript


## Possible + useful = relevant^[Kirk, 2019, pg. 130, figure 5.6]

- There is no right answer, there is the right answer for your situation
- Graph data more than once to show different aspects



# Perception: **Why** graphs work


## But first, your audience/viewer

  - Exhausted
  - Busy
  - Indifferent
  
::: {.absolute top="10%" left="40%" width="60%"}
![](images/cat_struggles_with_academic_book.jpg)
:::

## Presentation, accessible, usable, understandable.

     
- Visual patterns as an augment to working memory limitations of humans^[Few, 2021, *Now You See It: an introduction to visual data sensemaking*.  El Dorado Hills: Analytics Press. page 52]


::: {.absolute top="35%" left="10%" width="100%"}
```{r}
#| attr-output: "style='font-size: 1em'"
# learning how to position: https://meghan.rbind.io/blog/2022-07-12-making-slides-in-quarto-with-revealjs/#absolute-position
library(ggplot2)

tiny_data <- data.frame(x = c(0,2,3,4,6,2.5,3,3.5,4,6),
                        y = c(0.5,1,1,2,1.5,2,3,4,5,6),
                        z = c(rep("c", 5), rep("t", 5)),
                        a = c(1:10),
                        b = c(2,5,7,1,6,8,2,1,6,7),
                        c = c(3,2,3,1,4,2,3,1,4,1))

print(tiny_data[,1:3])

```
:::

::: {.absolute top="35%" left="35%" width="50%"}
```{r, echo=FALSE,warning=FALSE,message=FALSE,error=FALSE, results='hide',fig.keep='all'}

(tiny_plot <- ggplot(data = tiny_data, 
       mapping = aes(x = x,
                     y = y,
                     linetype = z)) +
  geom_line(size = 5) + 
  labs(x = "Time (s)", 
       y = "Volume (mL)",
       z = "Treatment")) +
  theme_classic()

```
:::






## Limits of "typical" human perception

- Universal design
  - Size of visualization elements (text, symbols, lines)
- Perceptual accuracy and "ordered elementary tasks"^[Robbins, 2005, *Creating More Effective Graphs*. Hoboken, NJ: Wiley-Interscience.]


## Top three "perceptually accurate representations"

1. Position along a common scale (common baseline)

::: {.absolute top="30%" left="0%" width="80%"}
```{r, echo=FALSE,warning=FALSE,message=FALSE,error=FALSE, results='hide',fig.keep='all'}
# learning how to position: https://meghan.rbind.io/blog/2022-07-12-making-slides-in-quarto-with-revealjs/#absolute-position
library(ggplot2)

ggplot(data = palmerpenguins::penguins, 
       mapping = aes(x = bill_length_mm,
                     y = flipper_length_mm, 
                     linetype = species))+
  geom_smooth(method = "lm", size = 2) + 
  labs(x = "Bill length (mm)", 
       y = "Flipper length (mm)") +
  guides(linetype = "none")+
  theme_classic()


```
:::


## Top three "perceptually accurate representations"

2. Position along identical, non-aligned scales (small multiples^[Tufte, 1990, *Envisioning Information*, Graphics Press.])

::: {.absolute top="30%" left="0%" width="80%"}
```{r, echo=FALSE,warning=FALSE,message=FALSE,error=FALSE, results='hide',fig.keep='all'}
# learning how to position: https://meghan.rbind.io/blog/2022-07-12-making-slides-in-quarto-with-revealjs/#absolute-position

ggplot(data = palmerpenguins::penguins, 
       mapping = aes(x = bill_length_mm,
                     y = bill_depth_mm,
                     shape = species))+
  geom_point() + 
  facet_wrap(species ~ .)+
  labs(x = "Bill length (mm)", 
       y = "Bill depth (mm)") +
  guides(shape = "none")+
  theme_classic()

```
:::

## Top three "perceptually accurate representations"
3. Length - both figures have a 1 "unit" difference


::: {.absolute top="35%" left="0%" width="100%"}
```{r, echo=FALSE,warning=FALSE,message=FALSE,error=FALSE, results='hide',fig.keep='all', fig.height = 3, fig.width = 10}

length_data <- data.frame(x = c(4, 5, 4, 6, 2, 88, 2, 87),
                          y = c(1, 1, 2, 2, 1, 1, 2, 2),
                          line = c("line1", "line1",
                                   "line2", "line2",
                                   "line3", "line3",
                                   "line4", "line4"),
                          panel = c(rep("Proportionately large difference", 4),
                                    rep("Proportionately small difference", 4)))

ggplot(data = length_data,
       mapping = aes(x = x,
                     y = y, group = line))+
  geom_line() +
  facet_wrap(panel ~ ., scale = "free") +
  theme_classic() +
  ylim(0,3)

```
:::



## More difficult to judge^[Robbins 2005, pg 61]

- Angle/slope
  - We can do slopes, but not angles (this is part of why pie charts difficult)
- Area
- Volume
- Color hue - color saturation - density
    

### When in doubt

- Choose the principle least likely to mislead^[Robbins 2005, pg 224]
- Use more than one for each variable for redundancy
  - For example, use both shape and color



# Design: **How** to communicate your message

## Consider location of audience (paper, screen, projection)
- Not all minds or eyes work the same - universal design
- Make changes to tell your story more clearly^[Kirk 2019, pg 33]
  - Program defaults usually not great
  - Learn how to save settings for graphs in code

![](/images/sun_in_eyes.jpg)

## What actions to take?
- Three ways to design systematically^[Few, 2012. *Show me the numbers: designing tables and graphs to enlighten, 2nd ed*. Burlingame, CA: Analytics Press.]

  - Highlight
  - Organize
  - "Integrate text" (context)


## Highlight

Show what you need to show!

::: {.absolute top="20%" left="0%" width="50%"}
![](images/fancy_gridded_cat.jpg)
:::

::: {.absolute top="35%" left="55%" width="50%"}
![](images/highlight_cat.png)
:::


## Highlight: make data obvious

- Make data visually prominent^[Robbins 2005, pg 163]


::: {.absolute top="35%" left="5%" width="50%"}
```{r, echo=FALSE,warning=FALSE,message=FALSE,error=FALSE, results='hide',fig.keep='all'}

ggplot(data = tiny_data, 
       mapping = aes(x = x,
                     y = y, 
                     linetype = z)) +
  geom_line() + 
  labs(x = "Time (s)", 
       y = "Volume (mL)",
       z = "Treatment",
       title = "Default ggplot2")

```
:::

::: {.absolute top="35%" left="45%" width="50%"}
```{r, echo=FALSE,warning=FALSE,message=FALSE,error=FALSE, results='hide',fig.keep='all'}

tiny_plot + theme_classic() + labs(title = "Settings updated")

```
:::



## Highlight: effective differences



::: {.absolute top="30%" left="4%" width="70%"}
```{r}
(graph1 <- ggplot(data = subset_penguins, 
       mapping = aes(x = body_mass_g, y = flipper_length_mm,
                     fill = species, shape = species)) +
  geom_point(size = 5) + 
  geom_smooth(method = 'lm', color = "black")+
  labs(x = "Penguin weight (g)", 
       y = "Flipper length (mm)") +
  theme_classic() +
  scale_fill_manual(values = c("black",
                                "black"))+
  
  scale_shape_manual(values = c(21,23))
)

```
:::


## Highlight: effective differences

- Maximum contrast/difference - does it help?

::: {.absolute top="30%" left="4%" width="70%"}
```{r}
(graph2 <- ggplot(data = subset_penguins, 
       mapping = aes(x = body_mass_g, y = flipper_length_mm,
                     fill = species, shape = species)) +
  geom_point(size = 5) + 
  geom_smooth(method = 'lm', color = "black")+
  labs(x = "Penguin weight (g)", 
       y = "Flipper length (mm)") +
  theme_classic() +
  scale_fill_manual(values = c("black",
                               "gray95"))+
  
  scale_shape_manual(values = c(21,23))
)

```
:::

## Highlight: effective differences

::: {.absolute top="30%" left="4%" width="70%"}
```{r}
(graph3 <- ggplot(data = subset_penguins, 
       color = "black",
       mapping = aes(x = body_mass_g, y = flipper_length_mm,
                     fill = species, shape = species)) +
  geom_point(size = 5) + 
  geom_smooth(method = 'lm', mapping = (aes(color = species)))+
  labs(x = "Penguin weight (g)", 
       y = "Flipper length (mm)") +
  theme_classic() +
  scale_color_manual(values = c("black", "darkgray"))+
  scale_fill_manual(values = c("black",
                               "darkgray"))+
  
  scale_shape_manual(values = c(21,23))
)

```
:::

## Highlight: effective differences

- Use smallest^[Tufte, 1997, *Visual Explanations*, Graphics Press] needed contrast

::: {.absolute top="30%" left="4%" width="33%"}
```{r}
graph1
```
:::

::: {.absolute top="30%" left="34%" width="33%"}
```{r}
graph2
```
:::

::: {.absolute top="30%" left="64%" width="33%"}
```{r}
graph3
```
:::

## Highlight: calculate before plotting

- Do the work for the viewer^[Robbins 2005, pg 216]
  - This means plot the variable of interest
  - Differences, not before and after

::: {.absolute top="35%" left="-5%" width="50%"}
```{r}
library(dplyr)
library(ggplot2)
library(tidyr)

summary_by_year <- palmerpenguins::penguins %>%
  group_by(species, year) %>%
  dplyr::filter(species != "Gentoo", year != 2007) %>%
  summarize(mean_flips = mean(flipper_length_mm)) %>%
  arrange(mean_flips)

ggplot(data = summary_by_year, 
       mapping = aes(x = species, y = mean_flips, fill = as.factor(year))) +
  geom_col(position = "dodge")+ 
  labs(x = "Penguin species", y = "Flipper length (mm)",
       fill = "Year")+
  theme_classic() + 
  coord_flip()

```

:::

::: {.absolute top="35%" left="45%" width="50%"}
```{r}

summary_penguin_diffs <- summary_by_year %>%
  ungroup()%>%
  pivot_wider(names_from = year, values_from = mean_flips)%>%
  mutate(diff_flips = `2008`-`2009`)

ggplot(data = summary_penguin_diffs, 
       mapping = aes(x = species, y = diff_flips)) +
  geom_point(size = 10) + 
  ylim(min = -1.5, 0)+
  labs(x = "Penguin species", 
       y = "Difference in flipper length (mm) from 2008 to 2009")+
  theme_classic() +
  coord_flip() +
  theme(  panel.grid.major.y = element_line())

```

:::

## Organize

"Visual complexity is distracting and should therefore never be employed to a degree that exceeds the actual complexity in the data"^[Few 2021, pg 49]


::: {.absolute top="35%" left="0%" width="45%"}
![](images/overly_complex_graph_cat.jpg)
:::

::: {.absolute top="35%" left="60%" width="20%"}
![](images/cleaned_graph_cat.jpg)

:::


## Organize: comparisons
- Use common baselines wherever possible to make group comparisons^[Robbins 2005, p 207]

::: {.absolute top="35%" left="05%" width="50%"}
```{r, echo=FALSE,warning=FALSE,message=FALSE,error=FALSE, results='hide',fig.keep='all'}

tiny_plot+
  theme_classic() +
  facet_wrap(z ~ ., scales = "free")

```

:::
::: {.absolute top="35%" left="45%" width="50%"}
```{r, echo=FALSE,warning=FALSE,message=FALSE,error=FALSE, results='hide',fig.keep='all'}

tiny_plot+
  theme_classic()

```

:::

## Organize: separate overlaps
- Use small multiples to show otherwise overlapping groups^[Robbins 2005, p 168-171]

::: {.absolute top="50%" left="4%" width="45%"}
```{r}
subset_penguins <- palmerpenguins::penguins %>%
  dplyr::filter(species != "Gentoo", year != 2007)

ggplot(data = subset_penguins, 
       mapping = aes(x = body_mass_g, y = flipper_length_mm,
                     color = species, shape = island)) +
  geom_point(size = 10) + 
  labs(x = "Penguin species", 
       y = "Flipper length (mm)")+
  theme_classic()

```
:::

::: {.absolute top="50%" left="54%" width="45%"}
```{r, echo=FALSE,warning=FALSE,message=FALSE,error=FALSE, results='hide',fig.keep='all'}
# learning how to position: https://meghan.rbind.io/blog/2022-07-12-making-slides-in-quarto-with-revealjs/#absolute-position

ggplot(data = subset_penguins, 
       mapping = aes(x = body_mass_g,
                     y = flipper_length_mm, 
                     color = species, 
                     shape = species)) +
  geom_point(size = 5) + 
  facet_wrap(island ~ .)+
  labs(x = "Penguin species", 
       y = "Flipper length (mm)")+
  theme_classic()

```
:::

## Organize: reduce clutter

- Reduce interior clutter^[Robbins 2005, pp 175-183] in grids, ticks, labels

::: {.absolute top="30%" left="4%" width="45%"}
```{r, echo=FALSE,warning=FALSE,message=FALSE,error=FALSE, results='hide',fig.keep='all'}
# learning how to position: https://meghan.rbind.io/blog/2022-07-12-making-slides-in-quarto-with-revealjs/#absolute-position

ggplot(data = subset_penguins, 
       mapping = aes(x = body_mass_g,
                     y = flipper_length_mm, 
                     color = species, 
                     shape = species)) +
  geom_point(size = 5) + 
  facet_wrap(island ~ .)
  labs(x = "Penguin species", 
       y = "Flipper length (mm)")

```
:::

::: {.absolute top="30%" left="54%" width="45%"}
```{r, echo=FALSE,warning=FALSE,message=FALSE,error=FALSE, results='hide',fig.keep='all'}
# learning how to position: https://meghan.rbind.io/blog/2022-07-12-making-slides-in-quarto-with-revealjs/#absolute-position

ggplot(data = subset_penguins, 
       mapping = aes(x = body_mass_g,
                     y = flipper_length_mm, 
                     color = species, 
                     shape = species)) +
  geom_point(size = 5) + 
  facet_wrap(island ~ .)+
  labs(x = "Penguin species", 
       y = "Flipper length (mm)") +
  theme_classic()

```
:::


## Integrate with context

::: {.absolute top="20%" left="0%" width="50%"}
![](images/nervous_dog.png)
:::

::: {.absolute top="20%" left="55%" width="50%"}
![](images/nervous_dog_context.jpg)
:::



## Context: consistency with text

- Label variables consistent with text^[Robbins 2005, p 193], not data abbreviations

::: {.absolute top="20%" left="4%" width="45%"}
```{r}
print(tiny_data[,1:3])
```
:::

::: {.absolute top="20%" left="30%" width="45%"}
```{r,fig.height=4, fig.width=4.5}
tiny_plot +
  theme_classic()+
  labs(linetype = "Treatment")
```
:::



## Context: consistency in symbols (default, not good)

- Use consistent symbology in related visualizations^[Robbins 2005, p 221]

::: {.absolute top="30%" left="4%" width="45%"}
```{r}

ggplot(data = palmerpenguins::penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     shape = species,
                     color = species)) + 
         geom_point(size = 5) +
    scale_color_manual(values = c("#A6CEE3",
                               "#1F78B4",
                               "#B2DF8A"))+
  scale_shape_manual(values = c(15,16,17))
```
:::

::: {.absolute top="30%" left="54%" width="45%"}

```{r}
ggplot(data = palmerpenguins::penguins[palmerpenguins::penguins$species!="Adelie",],
       mapping = aes(x = body_mass_g,
                     y = flipper_length_mm,
                     shape = species,
                     color = species)) + 
         geom_point(size = 5)+
  scale_color_manual(values = c("#A6CEE3",
                               "#1F78B4"))+
  scale_shape_manual(values = c(16,17))


```

:::


## Context: consistency in symbols (updated)

- Use consistent symbology in related visualizations^[Robbins 2005, p 221]

::: {.absolute top="30%" left="4%" width="45%"}
```{r}

ggplot(data = palmerpenguins::penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     shape = species,
                     color = species)) + 
         geom_point(size = 5) +
  scale_color_manual(values = c("#A6CEE3",
                               "#1F78B4",
                               "#B2DF8A"))+
  scale_shape_manual(values = c(15,16,17))
```
  
  
:::
  
::: {.absolute top="30%" left="54%" width="45%"}             
```{r}
ggplot(data = palmerpenguins::penguins[palmerpenguins::penguins$species!="Adelie",],
       mapping = aes(x = body_mass_g,
                     y = flipper_length_mm,
                     shape = species,
                     color = species)) + 
         geom_point(size = 5) +
  scale_color_manual(values = c(
                               "#1F78B4",
                               "#B2DF8A"))+
  scale_shape_manual(values = c(16,17))

```
:::




## Context: labelling

- Label directly on visuals where possible^[Robbins 2005, p 213]

::: {.absolute top="20%" left="4%" width="45%"}
```{r,fig.height=4, fig.width=4.5}
tiny_plot +
  theme_classic()+
  labs(linetype = "Treatment")
```
:::



::: {.absolute top="20%" left="50%" width="45%"}
```{r,fig.height=4, fig.width=4}

tiny_plot +
  annotate(geom = "text", x = 2, y = 4, label = "control", size = 10, angle = 25)+
  annotate(geom = "text", x = 4, y = 2.5, label = "treatment", size = 10) +
  guides(linetype="none") +
  theme_classic()
```
:::



# Ending activity (10 min)

## Work on your original graph

::: {.absolute top="10%" left="-10%" width="90%"}

![](images/complex_figure_to_critique.png)

:::

::: {.absolute top="15%" left="60%" width="50%"}

- What variables are included?
  - SPL dB(Z)
  - Frequency (Hz)
  - Some sort of heat map / intensity
  - Types of experiments/treatments
  - Annotation highlights

- What is confusing?

  - What are annotations?
  - Treatment combinations
  - x-axis ticks not proportional

:::

::: aside

"Noise source and individual physiology mediate effectiveness of bird songs adjusted to anthropogenic noise", 2018.
*Scientific Reports* 8:3942.

:::

## A possibility

::: {.absolute top="15%" left="60%" width="55%"}
- Are all revelant variables included?  no effect size
- Do I need more than one visual?  yes
- Make lines thicker, add shapes to show actual data points
- Make proportionally accurate x-axis
- Highlight the four important frequencies more
- Comparisons - switch so treatments clearer
- Organize - small multiples
- Label variables better
- Integrate with text and other figures (add sparrow picture)
:::

::: {.absolute top="10%" left="-10%" width="70%"}

```{r}

# https://stackoverflow.com/a/66220111
library(png)
sparrow <- readPNG(source = "./images/sparrow.png")
graphingdata <- read.csv("graphingdata.csv")
long_graphingdata <- pivot_longer(data = graphingdata,
                                  cols = Drilling.Playback:Screwpump,
                                  values_to = "dBZ",
                                  names_to = "Treatment")

ggplot(data = long_graphingdata,
       mapping = aes(x = Freq,
                     y = dBZ,
                     linetype = Treatment,
                     shape = Treatment)) +
  geom_line() +
  geom_point()+
  theme_classic() +
  geom_ribbon(mapping = aes(ymin = backgroundlowerCI,
                            ymax = backgroundupperCI),
              alpha = 0.1) +
  geom_ribbon(mapping = aes(ymin = playbacklowerCI,
                            ymax = playbackupperCI),
              alpha = 0.1) +
  geom_ribbon(mapping = aes(ymin = pumpjacklowerCI,
                            ymax = pumpjackupperCI),
              alpha = 0.1) +
  geom_ribbon(mapping = aes(ymin = screwpumplowerCI,
                            ymax = screwpumpupperCI),
              alpha = 0.1)+
  geom_vline(xintercept=c(4000, 8000)) +
  annotation_raster(raster = sparrow,
                    xmin = 4100,
                    xmax = 7900,
                    ymin = 65,
                    ymax = 73) +
  xlab("Frequency (Hz), measurements at 1/3 octave intervals")+
  ylab("Sound pressure level at 10 m [dB(Z)]")

```
:::


```{r}




```





## Get more help

-   OU Libraries Digital Scholarship and Data Services open office hours (drop in) or contact form at [libraries.ou.edu/data](https://libraries.ou.edu/data)

-   Resource handout w/checklist


::: {.absolute top="60%" left="0%" width="30%"}

![Handout (easy print PDF)](qrcode_osf-handout-pdf.png)

:::

::: {.absolute top="60%" left="60%" width="30%"}

![Handout (clickable HTML)](qrcode_osf-handout-html.png)

:::


## Please provide feedback

Survey link

![QR Code](qrcode_ou-libwizard-com.png)
